; Atoms
(def {nil} {})
;true and false already defined in code

; Function fun is already defined

; Unpack List for Function
(fun {unpack f l} {
    eval (join (list f) l)
 })

; Pack list for function
(fun {pack f & xs} {f xs})

; Curried and uncurried calling
(def {curry} unpack)
(def {uncurry} pack)

; Peform several things in sequence
(fun {do & l} {
    if (== l nil)
        {nil}
        {last l}
 })

; Open a new scope
(fun {let b} {
    ((\ {_} b) ())
 })

; logical operators already defined

; MISC
(fun {flip f a b} {f a b})
(fun {ghost & xs} {eval xs})
(fun {comp f g x} {f (g x)})

; LIST FUNCTIONS
; first, second, or third item in list
(fun {fst l} { eval (head l) })
(fun {snd l} { eval (head (tail l)) })
(fun {trd l} { eval (head (tail (tail l))) })

;len function already defined

; nth item in the list
(fun {nth n l} {
    if (== n 0)
        {fst l}
        {nth (- n 1) (tail l)}
 })

; Last item in list
(fun {last l} {nth (- (len l) 1) l})

; Take N items from front of list
(fun {take n l} {
    if (== n 0)
        {{}}
        {join (head l) (take (- n 1) (tail l))}
 })

; Drop N items from front of list
(fun {drop n l} {
    if (== n 0)
        {l}
        {drop (- n 1) (tail l)}
 })

; Split at N
(fun {split n l} {
    list (take n l) (drop n l)
 })

; Element of list
(fun {elem x l} {
    if (== l nil)
        {false}
        {if (== x (fst l))
            {true}
            {elem x (tail l)}}
 })

; Apply function to list
(fun {map f l} {
    if (== l nil)
        {nil}
        {join (list (f (fst l)) (map f (tail l)))}
 })

; Apply filter to list
(fun {filter f l} {
     if (== l nil) 
         {nil}
         {join (if (f (fst l))
                    {head l}
                    {nil})
               (filter f (tail l))}
 })

; Fold left
(fun {foldl f z l} {
    if (== l nil)
        {z}
        {foldl f (f z (fst l)) (tail l)}
 })

; Product and sum
(fun {sum l} {foldl + 0 l})
(fun {product l} {foldl * 1 l})

; Searches a list of two element lists, if the first term evaluates to true 
; the function evaluates and returns the second element
(fun {select & cs} {
    if (== cs nil)
        {error "No selection found"}
        {if (fst cs) 
            {snd (fst cs)} }
            {unpack select (tail cs)}
 })

 ; Default case
 (def {otherwise} true)

 ; Print day of month suffix
 (fun {month-day-suffix i} {
     select
        {(or (== i 21) 
             (or (== i 31) 
                 (== i 1)))     "st"}
        {(or (== i 22) 
             (== i 2))          "nd"}
        {(or (== i 23) 
             (== i 3))          "rd"}
        {otherwise              "th"}
  })

(fun {case x & cs} {
    if (== cs nil)
        {error "No case found"}
        {if (== x (fst (fst cs)))
            {snd (fst cs)}
            {unpack case (join (list x) (tail cs))}}
 })

(fun {day-name x} {
    case x
        {0 "Monday"}
        {1 "Tuesday"}
        {2 "Wednesday"}
        {3 "Thursday"}
        {4 "Friday"}
        {5 "Saturday"}
        {6 "Sunday"}
 })

; Fibonacci
(fun {fib n} {
    select
        { (== n 0) 0 }
        { (== n 1) 1 }
        { otherwise (+ (fib (-n 1)) 
                       (fib (- n 2))) }
 })
